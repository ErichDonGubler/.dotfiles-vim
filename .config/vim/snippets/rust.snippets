snippet helloworld "Basic hello world program"
	fn main() {
		println!("Hello, world!");
	}
snippet pt
	print!("${1:Hello, world!}"$2)
snippet ptln
	println!("${1:Hello, world!}"$2)
snippet ptlnvar
	println!("${2:$1}: {${3::#?}}", ${1:${VISUAL:var}})
snippet ept
	eprint!("${1:Hello, world!}"$2)
snippet eptln
	eprintln!("${1:Hello, world!}"$2)
snippet eptlnvar
	eprintln!("${2:$1}: {${3::#?}}", ${1:${VISUAL:var}})
snippet d
	dbg!(${1:${VISUAL}})
snippet use
	use {${1}};
snippet Result
	Result<${1:${VISUAL:Data}}, ${2:Error}>
snippet Ok
	Ok(${1:${VISUAL:data}})
snippet Err
	Err(${1:${VISUAL:data}})
snippet Option
	Option<${1:${VISUAL:Data}}>
snippet s
	Some(${1:${VISUAL:data}})
snippet parsestruct
	#[derive(Debug)]
	struct Raw${1:Thing}(pub ${2:Primitive});

	#[derive(Debug)]
	struct $1 {
		// TODO
		${3:${VISUAL:data: Data}},
	}

	#[derive(Debug)]
	enum $1ParseError {
		${5:// variants}
	}

	impl TryFrom<Raw$1> for $1 {
		type Err = $1ParseError;

		fn try_from(Raw$1($2): Raw$1) -> Result<$1, $1ParseError> {
			use self::$1ParseError;

			${4:// statements}
		}
	}
snippet parseprim
	#[derive(Debug)]
	struct Raw${1:Thing}(pub ${2:Primitive});

	#[derive(Debug)]
	struct $1 {
		// TODO
		${3:${VISUAL:data: Data}},
	}

	#[derive(Debug)]
	enum $1ParseError {
		${5:// variants}
	}

	impl TryFrom<Raw$1> for $1 {
		type Err = $1ParseError;

		fn try_from(Raw$1($2): Raw$1) -> Result<$1, $1ParseError> {
			use self::$1ParseError;

			${4:// statements}
		}
	}
