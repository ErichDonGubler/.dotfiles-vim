" Basic config/cache paths
let $VIMHOME = $XDG_CONFIG_HOME . "/vim/"
set rtp^=$VIMHOME
let g:vim_cache_directory = $XDG_CACHE_HOME . '/vim'
if has('gui_win32') " Windows gVim handles some cached assets differently because of paths
	let g:vim_cache_directory = $XDG_CACHE_HOME . '/gvim'
endif

set encoding=utf-8
set fileencoding=utf-8
if !has('gui_running')
	set t_Co=256
endif

call plug#begin(g:vim_cache_directory . '/bundle')
Plug 's3rvac/AutoFenc'
Plug 'tweekmonster/startuptime.vim'
Plug 'wakatime/vim-wakatime'

" Bindings for vanilla vim
set iskeyword-=.#
let maplocalleader = '|'
set clipboard=unnamed,unnamedplus
"   Vim config manipulation
nmap <silent> <leader>ve :vsp $VIMHOME<CR>
nmap <silent> <leader>vs :so $MYVIMRC<CR>
fun! s:SetGlobalFileStore(option, name)
	let directory = g:vim_cache_directory . '/' . a:name
	if !isdirectory(directory)
		call mkdir(directory, 'p')
	endif
	exec 'set ' . a:option . '=' . directory . '//'
endfun
call s:SetGlobalFileStore('directory', 'swapfiles')
call s:SetGlobalFileStore('backupdir', 'backups')
call s:SetGlobalFileStore('undodir', 'undo')
set undofile
exec 'set viminfo+=n' . escape(g:vim_cache_directory, '\\') . '/viminfo'
Plug 'djoshea/vim-autoread'
"   Alias Q to do what we really want
command! Q :q
command! -bang Q :q!
command! Qa :qa
command! -bang Qa :qa!
command! QA :qa
command! -bang QA :qa!
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :q!<CR>
nnoremap <Leader><Esc> :qa!<CR>
"   Get a Leader mapping for saves
nmap <Leader>s :w<CR>
command! -bang W :w!
"   Make Home go to the beginning of the indented line, not the line itself
noremap <Home> ^
"   Use Ctrl-Enter to go to a new line
imap <C-CR> <C-o>o
imap <C-S-CR> <C-o>O
" Xterm bindings
imap  <C-o>o
imap Âž <C-o>O
"   Use Shift-Delete to delete the current line
set <S-Del>=[3;2~
nmap <S-Del> dd
imap <S-Del> <C-o>dd
"     Here, the bind only deletes the content of the lines, not the lines themselves
vmap <S-Del> ^o$d
"   Add some common line-ending shortcuts
fun! s:append_to_line(sequence)
	let l = line(".")
	let c = col(".")
	exec 'normal! A' . a:sequence
	call cursor(l, c)
endfun
fun! s:derive_character_append(sequence, name)
	exec 'command! -nargs=0 Append' . a:name . ' call s:append_to_line("' . a:sequence . '")'
	exec 'nnoremap <Leader>' . a:sequence . ' :Append' . a:name . '<CR>'
endfun
call s:derive_character_append(';', 'Semicolon')
call s:derive_character_append('.', 'Period')
call s:derive_character_append(',', 'Comma')
Plug 'ErichDonGubler/vim-file-browser-integration'
nnoremap <Leader>e :SelectCurrentFile<CR>
nnoremap <Leader>x :OpenCurrentFile<CR>
nnoremap <Leader>E :OpenCWD<CR>

" VimPlug
let g:plug_window = 'vnew'
"   Helptags command: Normally Pathogen would do this, but we like VimPlug. :)
:command! Helptags call plug#helptags()

" Project configuration
Plug 'embear/vim-localvimrc'
let g:localvimrc_persistent = 1
let g:localvimrc_persistence_file = g:vim_cache_directory . '/localvimrc_persistent'
let g:localvimrc_sandbox = 0

" UI functionalities
if has("gui_running")
	set guioptions-=M " Don't source the menu bar script
	set guioptions-=m " Don't show the menu bar, either. ;)
	set guioptions-=T " Don't show the toolbar
	set guioptions-=e " Don't show GUI tabs
	set guioptions-=r " Don't show right-hand scrollbar
	set guioptions-=L " Don't show left-hand scrollbar
	set mousemodel= " Don't use right-click menu

	if has("gui_macvim")
		set guifont=Menlo\ Regular:h14
	elseif has("gui_win32")
		set guifont=Consolas:h12:cANSI
		Plug 'drmikehenry/vim-fontdetect'
		fun! s:ConfigureWindowsFont()
			if fontdetect#hasFontFamily("Source Code Pro")
				set guifont=Source\ Code\ Pro:h11:cANSI
			endif
		endfun
		call plug#add_end_task(function('s:ConfigureWindowsFont'))
	else
		set guifont=Inconsolata\ 14
	endif
else
	"    Fix terminal-specific settings so we get the correct colors and keybinds
	Plug 'wincent/terminus'

	set mouse=a
	noremap <C-ScrollWheelDown> 3zl
	noremap <C-ScrollWheelUp> 3zh

	" Force background drawing in truecolor terminals
	set t_ut=

	"      MinTTY bindings
	let s:mintty_keybind_modifiers_map = {
				\ '2': 'S',
				\ '3': 'M',
				\ '4': 'M-S',
				\ '5': 'C',
				\ '6': "C-S"
				\ }
	let s:mintty_keys_to_map = {
				\ 'Up':       '1;%sA',
				\ 'Down':     '1;%sB',
				\ 'Right':    '1;%sC',
				\ 'Left':     '1;%sD',
				\ 'PageUp':   '5;%s~',
				\ 'PageDown': '6;%s~',
				\ }
	for [vim_keycode_name, mintty_key_escape_pattern] in items(s:mintty_keys_to_map)
		for [escape_modifier_num, vim_modifier] in items(s:mintty_keybind_modifiers_map)
			let subbed = substitute(mintty_key_escape_pattern, "%s", escape_modifier_num, '')
			exec 'map <Esc>[' . subbed . ' <' . vim_modifier . '-' . vim_keycode_name . '>'
			exec 'inoremap <Esc>[' . subbed . ' <' . vim_modifier . '-' . vim_keycode_name . '>'
		endfor
	endfor
endif

set lazyredraw
set fillchars=vert:\â”‚
" Other view configuration
command! -nargs=0 ResetScrollOff set scrolloff=5
ResetScrollOff

Plug 'ErichDonGubler/vim-sublime-monokai'
let g:monokai_term_italic = 1
fun! s:ConfigureColors()
	colorscheme monokai
	call g:SublimeMonokaiHighlight('Todo', { 'fg': g:sublime_monokai_orange,   'format': 'bold,italic' }) " TODO: What the crap, man!
	call g:SublimeMonokaiHighlight('MatchTag', { 'format': 'reverse,standout' })

	hi! link jsRegexpCharClass Special
	hi! link jsRegexpBackRef SpecialChar
	hi! link jsRegexpMod SpecialChar
	hi! link jsRegexpOr SpecialChar

	" It's nice to have the builtins highlighted, but they can cause some conflicts
	hi! link pythonBuiltInObj Constant
	hi! link pythonBuiltInType Constant

	hi! link xmlProcessingDelim Comment
endfun
call plug#add_end_task(function('s:ConfigureColors'))

"   Status lines
set laststatus=2
set noshowmode
Plug 'itchyny/lightline.vim'
let g:lightline = {
		\ 'enable': {
		\   'tabline': 0
		\ }
	\ }

"   Git integration
Plug 'airblade/vim-gitgutter'
Plug 'Xuyuanp/nerdtree-git-plugin'
let g:NERDTreeIndicatorMapCustom = {
			\ "Clean"     : "âœ”ï¸Ž",
			\ "Deleted"   : "âœ–",
			\ "Dirty"     : "*",
			\ "Ignored"   : "Ã˜",
			\ "Modified"  : "*",
			\ "Renamed"   : "âžœ",
			\ "Staged"    : "+",
			\ "Unknown"   : "?",
			\ "Unmerged"  : "=",
			\ "Untracked" : "_",
			\ }
if has('python')
	Plug 'jaxbot/github-issues.vim'
endif
"   Pane manipulation
set hidden
set splitbelow
set splitright
Plug 'vim-scripts/ZoomWin'
Plug 'simeji/winresizer'
let g:winresizer_start_key = '<Leader><CR>'
" Better buffer/tab management
Plug 'zefei/vim-wintabs'
let g:wintabs_ui_show_vimtab_name = 2
map <C-PageUp> :WintabsPrevious<CR>
map <C-PageDown> :WintabsNext<CR>
map <Leader>w :WintabsClose<CR>
map <Leader>W :WintabsOnly<CR>:WintabsClose<CR>

"   Diffs
set diffopt+=vertical
"  Line numbers
set cursorline
set number
" Distraction-free mode
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
fun! s:goyo_enter()
	if executable('tmux') && strlen($TMUX)
		silent !tmux set status off
		silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
	endif
	set noshowmode
	set noshowcmd
	:EnableWordWrap
	Limelight
endfun

fun! s:goyo_leave()
	if executable('tmux') && strlen($TMUX)
		silent !tmux set status on
		silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
	endif
	set showmode
	set showcmd
	:DisableWordWrap
	Limelight!
endfun
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
nnoremap <Leader>g :Goyo<CR>

" Session management
set sessionoptions-=options " Don't remember options set before
set sessionoptions+=tabpages " Remember tabs in session
set sessionoptions+=globals
Plug 'tpope/vim-obsession'
Plug 'dhruvasagar/vim-prosession'
let g:prosession_dir = g:vim_cache_directory . '/session'
Plug 'gikmx/ctrlp-obsession' | Plug 'ctrlpvim/ctrlp.vim'
map <Leader>P :CtrlPObsession<CR>

" Symbols
set tags=.tags
augroup tags
	au!
	au BufNewFile,BufRead .tags setlocal filetype=tags
augroup END
if executable('ctags')
	Plug 'xolox/vim-easytags' | Plug 'xolox/vim-misc'
	let g:easytags_async = 1
	let g:easytags_dynamic_files = 2
	let g:easytags_resolve_links = 1
	Plug 'majutsushi/tagbar' | Plug 'xolox/vim-easytags'
	nmap <Leader>t :TagbarToggle<CR>
	let g:airline#extensions#tagbar#enabled = 0
endif

" Fuzzy matching facilities
Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_bufname_mod = ':t'
let g:ctrlp_bufpath_mod = ':~:.:h'
let g:ctrlp_by_filename = 1
let g:ctrlp_cache_dir = g:vim_cache_directory . '/ctrlp'
let g:ctrlp_extensions = ['buffertag', 'line', 'rtscript']
let g:ctrlp_follow_symlinks = 1
if executable('fd')
	let g:ctrlp_user_command = 'fd "" %s --color=never --follow'
	let g:ctrlp_use_caching = 0
elseif executable('rg')
	let g:ctrlp_user_command = 'rg %s --follow --files --color=never'
	let g:ctrlp_use_caching = 0
endif
let g:ctrlp_map = '<Leader>p'
map <Leader>p :CtrlP<CR>
map <Leader>o :CtrlPMRU<CR>
map <Leader>O :CtrlPBuffer<CR>
map <Leader>r :CtrlPBufTag %<CR>
map <Leader>R :CtrlPTag<CR>
map <Leader>/ :CtrlPLine<CR>
Plug 'ivalkeen/vim-ctrlp-tjump' | Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_tjump_only_silent = 1
nnoremap <c-]> :CtrlPtjump<CR>
vnoremap <c-]> :CtrlPtjumpVisual<CR>
if has('python')
	Plug 'FelikZ/ctrlp-py-matcher' | Plug 'ctrlpvim/ctrlp.vim'
	let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif

" Files
"   Navigation
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeTabsToggle', '<Plug>VinegarUp'] }
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'
map <Leader>K :NERDTreeFind<CR>
Plug 'jistr/vim-nerdtree-tabs'
let g:nerdtree_tabs_open_on_gui_startup = 2
map <Leader>k :NERDTreeTabsToggle<CR>
Plug 'ErichDonGubler/nerdtree-plugin-open-in-file-browser', { 'on': ['NERDTreeTabsToggle', '<Plug>VinegarUp']  }
Plug 'ErichDonGubler/nerdtree-ctrlp-root' | Plug 'ctrlpvim/ctrlp.vim'
Plug 'dhruvasagar/vim-vinegar', { 'on': '<Plug>VinegarUp'  }
map - <Plug>VinegarUp
"   Path/creation
Plug 'EinfachToll/DidYouMean'
Plug 'tpope/vim-eunuch'
Plug 'qpkorr/vim-renamer'
command! -nargs=0 Vidir Renamer
Plug 'pbrisbin/vim-mkdir'
Plug 'kopischke/vim-fetch'

" Text manipulation intelligence
"   Whitespace
set autoindent
set backspace=indent,eol,start
set shiftwidth=4
set tabstop=4
set softtabstop=4
"     Indentation
Plug 'ciaranm/detectindent'
augroup DetectIndent
	au!
	au BufReadPost * :DetectIndent
augroup END
Plug 'Yggdroot/indentline'
let g:indentLine_setColors = 0
let g:indentLine_char = 'â”†'
let g:indentLine_setConceal = 0
"     Splitjoin functionality
set formatoptions+=j
Plug 'AndrewRadev/splitjoin.vim'
let g:splitjoin_split_mapping = ''
nnoremap <Leader>S :SplitjoinSplit<CR>
nnoremap <Leader>J :SplitjoinJoin<CR>
"     Whitespace character viewing
set list
fun! EnableShowWhitespace(...)
	set listchars=eol:$,tab:\â”œ\â”€,trail:~,extends:>,precedes:<,space:Â·,
	let s:showWhitespaceToggled = 1
endfun
fun! DisableShowWhitespace(...)
	set listchars=tab:\â”†\ ,precedes:<,extends:>
	let s:showWhitespaceToggled = 0
endfun
fun! ToggleShowWhitespace()
	if s:showWhitespaceToggled
		call DisableShowWhitespace()
	else
		call EnableShowWhitespace()
	endif
endfun
call DisableShowWhitespace()
nnoremap <Leader>i :call ToggleShowWhitespace()<CR>
"     Wrapping behavior
set formatoptions-=t " Disable hard breaks at textwidth boundary
set breakindentopt=shift:2 " Show soft-wrapped text with extra indent of 2 spaces
set showbreak=->
Plug 'ErichDonGubler/vim-option-bundle'
command! -nargs=0 DisableWordWrap call g:word_wrap_bundle.SetLocalTo(0)
command! -nargs=0 EnableWordWrap call g:word_wrap_bundle.SetLocalTo(1)
fun! s:BindWordWrapOptions()
	let g:word_wrap_bundle = option_bundle#create('word wrap', 0, ['wrap', 'linebreak', 'breakindent'])
	nnoremap <Leader><Tab> :call g:word_wrap_bundle.ToggleLocal()<CR>
	nnoremap <Leader><S-Tab> :call g:word_wrap_bundle.ToggleGlobal()<CR>
endfun
call plug#add_end_task(function('s:BindWordWrapOptions'))
"     Trim trailing whitespace on save
Plug 'ntpeters/vim-better-whitespace'
hi! link ExtraWhitespace Error
augroup StripWhitespace
	autocmd BufEnter * EnableStripWhitespaceOnSave
augroup END
"   Alignment
Plug 'junegunn/vim-easy-align'
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
"   Selection
nmap <Leader>v <C-v>^o$
"   Generic textobjs
Plug 'wellle/targets.vim'
Plug 'glts/vim-textobj-comment'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-line'
"   Special integration for the Internet
Plug 'mattn/vim-textobj-url'
Plug 'tyru/open-browser.vim'
map <Leader>u <Plug>(openbrowser-smart-search)
"   Arguments
Plug 'peterrincker/vim-argumentative'
"   Prose
Plug 'reedes/vim-textobj-quote'
"   HTML/XML textobjs
Plug 'mattn/emmet-vim'
Plug 'whatyouhide/vim-textobj-xmlattr' | Plug 'kana/vim-textobj-user'
Plug 'thalesmello/vim-textobj-methodcall' | Plug 'kana/vim-textobj-user'
Plug 'alvan/vim-closetag'
"   Nice highlighting plugins
Plug 'geoffharcourt/vim-coloresque'
if has('python')
	Plug 'Valloric/MatchTagAlways'
endif
Plug 'unblevable/quick-scope'
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
Plug 'dominikduda/vim_current_word'
let g:vim_current_word#highlight_only_in_focused_window = 1
hi link CurrentWord Underlined
"    Misc
Plug 'terryma/vim-multiple-cursors'
Plug 'cohama/lexima.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
"     Datetime
nnoremap <F5> "=strftime("%F")<CR>P
inoremap <F5> <C-R>=strftime("%F")<CR>
nnoremap <S-F5> "=strftime("%F %T")<CR>P
inoremap <S-F5> <C-R>=strftime("%F %T")<CR>

" Buffer navigation
"   Selection behavior more consistent with other visual editors
"   TODO: How can we make this change based on the direction we went from the selection?
vnoremap <C-Left> B
vnoremap <C-Right> E
Plug 'tpope/vim-unimpaired'
Plug 'easymotion/vim-easymotion'
"   Search
set hlsearch
set ignorecase
set incsearch
set smartcase
hi! link Search Underlined
map <Leader>h :%s/
vmap <Leader>h :s/
"   Better buffer search
Plug 'haya14busa/is.vim'
Plug 'haya14busa/vim-asterisk'
map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
Plug 'osyo-manga/vim-anzu'
map n <Plug>(is-nohl)<Plug>(anzu-n-with-echo)
map N <Plug>(is-nohl)<Plug>(anzu-N-with-echo)
Plug 'gelguy/cmd2.vim'
let g:Cmd2_options = {
	\ '_complete_ignorecase': 1,
	\ '_complete_uniq_ignorecase': 0,
	\ '_complete_fuzzy': 1,
	\ }
cmap <F12> <Plug>(Cmd2Suggest)
"   Multi-file search
Plug 'dyng/ctrlsf.vim'
nnoremap <Leader>F :CtrlSF<Space>
let g:ctrlsf_mapping = {
			\ "next": "n",
			\ "prev": "N",
			\ }
let g:ctrlsf_case_sensitive = 'smart'
nnoremap <Leader>f :CtrlSFToggle<CR>
if executable('rg')
	let g:ctrlsf_ackprg = 'rg'
	let g:ctrlsf_extra_backend_args = {
		\ 'rg': '--follow'
		\ }
elseif executable('grep')
	let g:ctrlsf_ackprg = 'grep'
endif

" Builds
map <Leader>b :make<CR>
Plug 'ErichDonGubler/ctrlp-compiler'
map <Leader>B :CtrlPCompiler<CR>

" Linting
if has('python')
	Plug 'w0rp/ale'
else
	Plug 'vim-syntastic/syntastic'
	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_check_on_open = 1
	let g:syntastic_check_on_wq = 0
endif

" Completion
if has('python')
	Plug 'Valloric/YouCompleteMe', { 'do': 'python2 install.py' }
	let g:ycm_key_list_select_completion = ['<C-n>']
	let g:ycm_key_list_previous_completion = ['<C-p>']
endif

" Snippets
if has('python')
	Plug 'SirVer/ultisnips'
	let g:UltiSnipsExpandTrigger = '<Tab>'
	let g:UltiSnipsJumpForwardTrigger = '<Tab>'
	let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
else
	Plug 'garbas/vim-snipmate' | Plug 'tomtom/tlib_vim' | Plug 'MarcWeber/vim-addon-mw-utils'
	let g:snipMate = get(g:, 'snipMate', {})
	let g:snipMate.snippet_version = 1
endif
Plug 'honza/vim-snippets'

" Expanded language support
Plug 'gisphm/vim-gitignore'
Plug 'plasticboy/vim-markdown'
set fo-=l
fun! s:SetRowLimit(length, ...)
	let rulers = a:length
	let additional_rulers = a:000
	if len(a:000)
		let rulers = a:length . ',' . join(additional_rulers, ',')
	endif
	exec 'set colorcolumn=' . rulers
	exec 'set tw=' . a:length - 1

	if a:length
		set fo+=t
	else
		set fo-=t
	endif
endfun
command! -nargs=+ SetRowLimit call s:SetRowLimit(<f-args>)
augroup markdown
	au!
	au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
	au BufNewFile,BufRead *.md,*.markdown SetRowLimit 80
	au BufNewFile,BufRead *.md,*.markdown EnableWordWrap
augroup END
let g:tagbar_type_markdown = {
			\ 'ctagstype' : 'markdown',
			\ 'kinds' : [
			\ 'h:Heading_L1',
			\ 'i:Heading_L2',
			\ 'k:Heading_L3'
			\ ]
			\ }
Plug 'rust-lang/rust.vim'
let g:syntastic_rust_checkers = ['rustc']
Plug 'OrangeT/vim-csharp'
Plug 'cespare/vim-toml'
Plug 'jceb/vim-orgmode' | Plug 'tpope/vim-speeddating'
let g:org_heading_highlight_colors = ['Identifier']
let g:org_heading_highlight_levels = 10 " Some arbitrary number
augroup orgmode
	 au!
	 au FileType text,org :EnableWordWrap
augroup END
Plug 'rudes/vim-java'
Plug 'pangloss/vim-javascript'
let g:tagbar_type_javascript = {
			\ 'ctagstype' : 'JavaScript',
			\ 'kinds'     : [
				\ 'o:objects',
				\ 'c:classes',
				\ 'f:functions',
				\ 'a:arrays',
				\ 'm:methods',
				\ 'n:constants',
				\ 's:strings'
				\ ]
			\ }
if executable('npm')
	Plug 'mxw/vim-jsx'

	Plug 'leafgarland/typescript-vim'
	Plug 'posva/vim-vue', { 'do': 'npm i -g eslint eslint-plugin-vue' }
endif
Plug 'leafgarland/typescript-vim'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'python-mode/python-mode'
augroup Batch
	au!
	autocmd FileType dosbatch setlocal commentstring=REM\ %s
augroup END
augroup SublimeConfigFiles
	au!
	au BufNewFile,BufRead *.sublime-project,*.sublime-build,*.sublime-snippet setlocal filetype=json
augroup END
" Plug 'dag/vim-fish'

fun! s:EscapeFileAsArg(file_name)
	let escaped = expand(a:file_name)
	if has('win32unix')
		let escaped = '"$(cygpath -w "' . escaped . '")"'
	endif
	return escaped
endf

fun! s:EscapeCurrentFileAsArg()
	return s:EscapeFileAsArg(expand('%:p'))
endfun

command! -nargs=0 OpenFileInSublime exec 'silent !subl ' . s:EscapeCurrentFileAsArg() . ':' . line('.') . ':' . col('.') | redraw!
nmap <Leader>S :OpenFileInSublime<CR>

if has('win32unix')
	command! -nargs=0 OpenFileInVisualStudio exec 'silent !devenv //edit ' . s:EscapeCurrentFileAsArg() . ' //command "' . line('.') . '"' | redraw!
elseif has('win32')
	command! -nargs=0 OpenFileInVisualStudio exec 'silent !devenv /edit ' . s:EscapeCurrentFileAsArg() . ' /command "' . line('.') . '"' | redraw!
endif
nmap <Leader>V :OpenFileInVisualStudio<CR>

call plug#end()

fun! s:SyntaxStack()
	if !exists('*synstack')
		return
	endif
	return map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
command! -nargs=0 EchoHighlightingGroup echo s:SyntaxStack()
nnoremap <leader>0 :EchoHighlightingGroup<CR>
